{
    "contents" : "//------------------------------------------------------------------------------\n//  GBM by Greg Ridgeway  Copyright (C) 2003\n//\n//  File:       gbm_engine.h\n//\n//  License:    GNU GPL (version 2 or later)\n//\n//  Contents:   Generalized boosted model engine\n//\n//  Owner:      gregr@rand.org\n//\n//  History:    3/26/2001   gregr created\n//              2/14/2003   gregr: adapted for R implementation\n//\n//------------------------------------------------------------------------------\n\n#ifndef GBM_ENGINGBM_H\n#define GBM_ENGINGBM_H\n\n#include <vector>\n#include \"buildinfo.h\"\n#include \"distribution.h\"\n#include \"tree.h\"\n#include \"dataset.h\"\n#include \"node_factory.h\"\n\nusing namespace std;\n\nclass CGBM\n{\n\npublic:\n\n    CGBM();\n    ~CGBM();\n    GBMRESULT Initialize(CDataset *pData,\n                         CDistribution *pDist,\n                         double dLambda,\n                         unsigned long nTrain,\n                         double dBagFraction,\n                         unsigned long cLeaves,\n                         unsigned long cMinObsInNode,\n\t\t\t unsigned long cNumClasses,\n                         int cGroups);\n\n    GBMRESULT iterate(double *adF,\n                    double &dTrainError,\n                    double &dValidError,\n                    double &dOOBagImprove,\n                    int &cNodes,\n\t\t\t\t\tint cNumClasses,\n\t\t\t\t\tint cClassIdx);\n    GBMRESULT TransferTreeToRList(int *aiSplitVar,\n                                double *adSplitPoint,\n                                int *aiLeftNode,\n                                int *aiRightNode,\n                                int *aiMissingNode,\n                                double *adErrorReduction,\n                                double *adWeight,\n                                double *adPred,\n                                VEC_VEC_CATEGORIES &vecSplitCodes,\n                                int cCatSplitsOld);\n    GBMRESULT Predict(unsigned long iVar,\n                    unsigned long cTrees,\n                    double *adF,\n                    double *adX,\n                    unsigned long cLength);\n    GBMRESULT Predict(double *adX,\n                    unsigned long cRow,\n                    unsigned long cCol,\n                    unsigned long cTrees,\n                    double *adF);\n\n    GBMRESULT GetVarRelativeInfluence(double *adRelInf,\n                                    unsigned long cTrees);\n    GBMRESULT PrintTree();\n\n    bool IsPairwise() const { return (cGroups >= 0); }\n    CDataset *pData;            // the data\n    CDistribution *pDist;       // the distribution\n    bool fInitialized;          // indicates whether the GBM has been initialized\n    CNodeFactory *pNodeFactory;\n\n    // these objects are for the tree growing\n    // allocate them once here for all trees to use\n    bool *afInBag;\n    unsigned long *aiNodeAssign;\n    CNodeSearch *aNodeSearch;\n    PCCARTTree ptreeTemp;\n    VEC_P_NODETERMINAL vecpTermNodes;\n    double *adZ;\n    double *adFadj;\n\nprivate:\n    double dLambda;\n    unsigned long cTrain;\n    unsigned long cValid;\n    unsigned long cTotalInBag;\n    double dBagFraction;\n    unsigned long cDepth;\n    unsigned long cMinObsInNode;\n    int  cGroups;\n};\n\n#endif // GBM_ENGINGBM_H\n\n\n\n",
    "created" : 1444789572419.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "162386773",
    "id" : "4EF65F61",
    "lastKnownWriteTime" : 1426060578,
    "path" : "C:/Users/ambar_000/Desktop/COMP594/Blum Project/R Code/gbm/src/gbm_engine.h",
    "project_path" : "src/gbm_engine.h",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "h"
}