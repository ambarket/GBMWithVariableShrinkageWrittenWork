{
    "contents" : "//------------------------------------------------------------------------------\n//\n//  GBM by Greg Ridgeway  Copyright (C) 2003\n//  File:       gbm.cpp\n//\n//------------------------------------------------------------------------------\n\n#include<vector>\n#include \"gbm.h\"\n\n// Count the number of distinct groups in the input data\nint num_groups(const double* adMisc, int cTrain)\n{\n    if (cTrain <= 0)\n    {\n        return 0;\n    }\n    double dLastGroup = adMisc[0];\n    int cGroups = 1;\n\n    for(int i=1; i<cTrain; i++)\n    {\n        const double dGroup = adMisc[i];\n        if (dGroup != dLastGroup)\n        {\n            dLastGroup = dGroup;\n            cGroups++;\n        }\n    }\n    return cGroups;\n}\n\nunsigned long gbm_setup\n(\n    double *adY,\n    double *adOffset,\n    double *adX,\n    int *aiXOrder,\n    double *adWeight,\n    double *adMisc,\n    int cRows,\n    int cCols,\n    int *acVarClasses,\n    int *alMonotoneVar,\n    const char *pszFamily,\n    int cTrees,\n    int cDepth,\n    int cMinObsInNode,\n    int cNumClasses,\n    double dShrinkage,\n    double dBagFraction,\n    int cTrain,\n    CDataset *pData,\n    PCDistribution &pDist,\n    int& cGroups\n)\n{\n    unsigned long hr = 0;\n    cGroups = -1;\n\n    hr = pData->SetData(adX,aiXOrder,adY,adOffset,adWeight,adMisc,\n                        cRows,cCols,acVarClasses,alMonotoneVar);\n\n    if(GBM_FAILED(hr))\n    {\n        goto Error;\n    }\n\n    // set the distribution\n    if(strncmp(pszFamily,\"bernoulli\",2) == 0)\n    {\n        pDist = new CBernoulli();\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strncmp(pszFamily,\"gaussian\",2) == 0)\n    {\n        pDist = new CGaussian();\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strncmp(pszFamily,\"poisson\",2) == 0)\n    {\n        pDist = new CPoisson();\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strncmp(pszFamily,\"adaboost\",2) == 0)\n    {\n        pDist = new CAdaBoost();\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strncmp(pszFamily,\"coxph\",2) == 0)\n    {\n        pDist = new CCoxPH();\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strncmp(pszFamily,\"laplace\",2) == 0)\n    {\n        pDist = new CLaplace();\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strncmp(pszFamily,\"quantile\",2) == 0)\n    {\n        pDist = new CQuantile(adMisc[0]);\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strncmp(pszFamily,\"tdist\",2) == 0)\n    {\n        pDist = new CTDist(adMisc[0]);\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strncmp(pszFamily,\"multinomial\",2) == 0)\n    {\n        pDist = new CMultinomial(cNumClasses, cRows);\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strncmp(pszFamily,\"huberized\",2) == 0)\n    {\n        pDist = new CHuberized();\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strcmp(pszFamily,\"pairwise_conc\") == 0)\n    {\n        pDist = new CPairwise(\"conc\");\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strcmp(pszFamily,\"pairwise_ndcg\") == 0)\n    {\n        pDist = new CPairwise(\"ndcg\");\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strcmp(pszFamily,\"pairwise_map\") == 0)\n    {\n        pDist = new CPairwise(\"map\");\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else if(strcmp(pszFamily,\"pairwise_mrr\") == 0)\n    {\n        pDist = new CPairwise(\"mrr\");\n        if(pDist==NULL)\n        {\n            hr = GBM_OUTOFMEMORY;\n            goto Error;\n        }\n    }\n    else\n    {\n        hr = GBM_INVALIDARG;\n        goto Error;\n    }\n\n    if(pDist==NULL)\n    {\n        hr = GBM_INVALIDARG;\n        goto Error;\n    }\n\n    if (!strncmp(pszFamily, \"pairwise\", strlen(\"pairwise\")))\n    {\n        cGroups = num_groups(adMisc, cTrain);\n    }\n\nCleanup:\n    return hr;\nError:\n    goto Cleanup;\n}\n\n\nGBMRESULT gbm_transfer_to_R\n(\n    CGBM *pGBM,\n    VEC_VEC_CATEGORIES &vecSplitCodes,\n    int *aiSplitVar,\n    double *adSplitPoint,\n    int *aiLeftNode,\n    int *aiRightNode,\n    int *aiMissingNode,\n    double *adErrorReduction,\n    double *adWeight,\n    double *adPred,\n    int cCatSplitsOld\n)\n{\n    GBMRESULT hr = GBM_OK;\n\n\n    hr = pGBM->TransferTreeToRList(aiSplitVar,\n                                   adSplitPoint,\n                                   aiLeftNode,\n                                   aiRightNode,\n                                   aiMissingNode,\n                                   adErrorReduction,\n                                   adWeight,\n                                   adPred,\n                                   vecSplitCodes,\n                                   cCatSplitsOld);\n    if(GBM_FAILED(hr)) goto Error;\n\nCleanup:\n    return hr;\nError:\n    goto Cleanup;\n}\n\n\nGBMRESULT gbm_transfer_catsplits_to_R\n(\n    int iCatSplit,\n    VEC_VEC_CATEGORIES &vecSplitCodes,\n    int *aiSplitCodes\n)\n{\n    unsigned long i=0;\n\n    for(i=0; i<vecSplitCodes[iCatSplit].size(); i++)\n    {\n        aiSplitCodes[i] = vecSplitCodes[iCatSplit][i];\n    }\n\n    return GBM_OK;\n}\n\n\nint size_of_vector\n(\n    VEC_VEC_CATEGORIES &vec,\n    int i\n)\n{\n    return vec[i].size();\n}\n\n\n\n",
    "created" : 1444789234230.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3203082236",
    "id" : "A38B2FD3",
    "lastKnownWriteTime" : 1426060578,
    "path" : "C:/Users/ambar_000/Desktop/COMP594/Blum Project/R Code/gbm/src/gbm.cpp",
    "project_path" : "src/gbm.cpp",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "cpp"
}