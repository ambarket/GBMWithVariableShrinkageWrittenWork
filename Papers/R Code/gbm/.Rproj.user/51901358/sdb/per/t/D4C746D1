{
    "contents" : "//  GBM by Greg Ridgeway  Copyright (C) 2003\n\n#include \"gaussian.h\"\n\nCGaussian::CGaussian()\n{\n}\n\nCGaussian::~CGaussian()\n{\n}\n\n\nGBMRESULT CGaussian::ComputeWorkingResponse\n(\n    double *adY,\n    double *adMisc,\n    double *adOffset,\n    double *adF, \n    double *adZ, \n    double *adWeight,\n    bool *afInBag,\n    unsigned long nTrain,\n\tint cIdxOff\n)\n{\n    GBMRESULT hr = GBM_OK;\n    unsigned long i = 0;\n\n    if((adY == NULL) || (adF == NULL) || (adZ == NULL) || (adWeight == NULL))\n    {\n        hr = GBM_INVALIDARG;\n        goto Error;\n    }\n\n    if(adOffset == NULL)\n    {\n        for(i=0; i<nTrain; i++)\n        {\n            adZ[i] = adY[i] - adF[i];\n        }\n    }\n    else\n    {\n        for(i=0; i<nTrain; i++)\n        {\n            adZ[i] = adY[i] - adOffset[i] - adF[i];\n        }\n    }\n\nCleanup:\n    return hr;\nError:\n    goto Cleanup;\n}\n\n\n\nGBMRESULT CGaussian::InitF\n(\n    double *adY,\n    double *adMisc,\n    double *adOffset, \n    double *adWeight,\n    double &dInitF, \n    unsigned long cLength\n)\n{\n    double dSum=0.0;\n    double dTotalWeight = 0.0;\n    unsigned long i=0;\n\n    // compute the mean\n    if(adOffset==NULL)\n    {\n        for(i=0; i<cLength; i++)\n        {\n            dSum += adWeight[i]*adY[i];\n            dTotalWeight += adWeight[i];\n        }\n    }\n    else\n    {\n        for(i=0; i<cLength; i++)\n        {\n            dSum += adWeight[i]*(adY[i] - adOffset[i]);\n            dTotalWeight += adWeight[i];\n        }\n    }\n    dInitF = dSum/dTotalWeight;\n\n    return GBM_OK;\n}\n\n\ndouble CGaussian::Deviance\n(\n    double *adY,\n    double *adMisc,\n    double *adOffset, \n    double *adWeight,\n    double *adF,\n    unsigned long cLength,\n\tint cIdxOff\n)\n{\n    unsigned long i=0;\n    double dL = 0.0;\n    double dW = 0.0;\n\n    if(adOffset == NULL)\n    {\n        for(i=cIdxOff; i<cLength+cIdxOff; i++)\n        {\n            dL += adWeight[i]*(adY[i]-adF[i])*(adY[i]-adF[i]);\n            dW += adWeight[i];\n        }\n    }\n    else\n    {\n        for(i=cIdxOff; i<cLength+cIdxOff; i++)\n        {\n            dL += adWeight[i]*(adY[i]-adOffset[i]-adF[i])*\n                              (adY[i]-adOffset[i]-adF[i]);\n            dW += adWeight[i];\n       }\n    }\n\n    return dL/dW;\n}\n\n\nGBMRESULT CGaussian::FitBestConstant\n(\n    double *adY,\n    double *adMisc,\n    double *adOffset,\n    double *adW,\n    double *adF,\n    double *adZ,\n    unsigned long *aiNodeAssign,\n    unsigned long nTrain,\n    VEC_P_NODETERMINAL vecpTermNodes,\n    unsigned long cTermNodes,\n    unsigned long cMinObsInNode,\n    bool *afInBag,\n    double *adFadj,\n\tint cIdxOff\n)\n{\n    // the tree aready stores the mean prediction\n    // no refitting necessary\n\n    return GBM_OK;\n}\n\ndouble CGaussian::BagImprovement\n(\n    double *adY,\n    double *adMisc,\n    double *adOffset,\n    double *adWeight,\n    double *adF,\n    double *adFadj,\n    bool *afInBag,\n    double dStepSize,\n    unsigned long nTrain\n)\n{\n    double dReturnValue = 0.0;\n    double dF = 0.0;\n    double dW = 0.0;\n    unsigned long i = 0;\n\n    for(i=0; i<nTrain; i++)\n    {\n        if(!afInBag[i])\n        {\n            dF = adF[i] + ((adOffset==NULL) ? 0.0 : adOffset[i]);\n            \n            dReturnValue += adWeight[i]*dStepSize*adFadj[i]*\n                            (2.0*(adY[i]-dF) - dStepSize*adFadj[i]);\n            dW += adWeight[i];\n        }\n    }\n\n    return dReturnValue/dW;\n}\n\n\n\n",
    "created" : 1443196227418.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "911847683",
    "id" : "D4C746D1",
    "lastKnownWriteTime" : 1426060578,
    "path" : "C:/Users/ambar_000/Desktop/COMP594/Blum Project/R Code/gbm/src/gaussian.cpp",
    "project_path" : "src/gaussian.cpp",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "cpp"
}